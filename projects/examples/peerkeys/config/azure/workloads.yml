# Workloads information - azure
# Ref: https://etcd.io/docs/current/op-guide/configuration/ + https://github.com/bitnami/charts/tree/master/bitnami/etcd + https://etcd.io/docs/v3.4.0/op-guide/container/ and comments at end!
# Example of escaping to the value to be parsed inside container: ``$``(MY_POD_IP``)
# Note regarding registry-credential: make sure the server location is in the format --docker-server=http://${env:_registryLocation}.azurecr.io 
# Ingress: TCP: --set tcp.[external-port]="[namespace]/[service]:[port]"
---
globalVariables:
  namespace: "yrn42peerkeys"
  containerPrefix: "yrn42peerkeys"
  registryName: "componentsRegistry"
  certManagerIssuerEmail: "certificates@yrn42peerkeys.app"
  _registryLocation: '$($([Environment]::GetEnvironmentVariable("${env:registryName}.registryLocation")) -replace ''.azurecr.io'','''')'
  dockerUsername: "$(az acr credential show -n ${env:_registryLocation} --query username)"
  dockerPassword: "$(az acr credential show -n ${env:_registryLocation} --query passwords[0].value)"
  ingressClass: "nginx"
  etcdPassword: "yurunaDemo"
  rsPrefix: "etcd"
  rsip001: '$([Environment]::GetEnvironmentVariable("${env:containerPrefix}001.hostname"))'
  rspc001: 1379
  rspp001: 1380
  rsip002: '$([Environment]::GetEnvironmentVariable("${env:containerPrefix}002.hostname"))'
  rspc002: 2379
  rspp002: 2380
  rsip003: '$([Environment]::GetEnvironmentVariable("${env:containerPrefix}003.hostname"))'
  rspc003: 3379
  rspp003: 3380
  # https://helm.sh/docs/intro/using_helm/#the-format-and-limitations-of---set
  rsCluster: ${env:rsPrefix}001=http://${env:rsip001}:${env:rspp001}\,${env:rsPrefix}002=http://${env:rsip002}:${env:rspp002}\,${env:rsPrefix}003=http://${env:rsip003}:${env:rspp003}
  rsClusterToken: nossila

workloads:

  - context: "${env:containerPrefix}001"
    variables:
      _number: "001"
      _basename: "${env:containerPrefix}${env:_number}"
      namespace: "${env:_basename}"
      frontendApp: "${env:_basename}-site"
      frontendPathBase: "front${env:_number}"
      backendApp: "${env:_basename}-grava"
      backendPathBase: "back${env:_number}"
      replicatedStateApp: "${env:rsPrefix}${env:_number}"
      replicatedStatePortClient: '$([Environment]::GetEnvironmentVariable("rspc${env:_number}"))'
      replicatedStatePortPeer: '$([Environment]::GetEnvironmentVariable("rspp${env:_number}"))'
      _endpointHost: '$([Environment]::GetEnvironmentVariable("${env:contextName}.hostname"))'
      _rsip: '$([Environment]::GetEnvironmentVariable("rsip${env:_number}"))'
      _rspc: '$([Environment]::GetEnvironmentVariable("rspc${env:_number}"))'
      _rspp: '$([Environment]::GetEnvironmentVariable("rspp${env:_number}"))'
    deployments:
      - kubectl: "delete namespace ingress-basic --v=1"
      - kubectl: "create namespace ingress-basic --v=1"
      - helm: "repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"
      - helm: "repo update"
      - helm: >
          install nginx-ingress ingress-nginx/ingress-nginx
          --namespace ingress-basic
          --set controller.replicaCount=2
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
          --set controller.admissionWebhooks.enabled=false
          --set controller.ingressClass=${env:ingressClass}
          --set tcp.${env:_rspc}="${env:namespace}/${env:replicatedStateApp}:${env:_rspc}"
          --set tcp.${env:_rspp}="${env:namespace}/${env:replicatedStateApp}:${env:_rspp}"
          --set controller.service.loadBalancerIP="$([Environment]::GetEnvironmentVariable("${env:contextName}.frontendIp"))"
          --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="${env:contextName}"          
          # --debug
      - kubectl: "delete namespace ${env:namespace} --v=1"
      - kubectl: "create namespace ${env:namespace} --v=1"
      - kubectl: "config set-context --current --namespace=${env:namespace} --v=1"
      - kubectl: "create secret docker-registry registry-credential --docker-server=http://${env:_registryLocation}.azurecr.io --docker-username=${env:dockerUsername} --docker-password=${env:dockerPassword}"
      - chart: "replicator-etcd"
        variables:
          installName: "${env:_basename}-deployment"
      - helm: "repo add bitnami https://charts.bitnami.com/bitnami"
      - helm: "repo update"
      - helm: >
          install ${env:replicatedStateApp} bitnami/etcd
          --namespace ${env:namespace}
          --set persistence.enabled=false
          --set auth.rbac.enabled=false
          --set containerPorts.client=${env:_rspc}
          --set containerPorts.peer=${env:_rspp}
          --set service.port=${env:_rspc}
          --set service.peerPort=${env:_rspp}
          --set service.type=LoadBalancer
          --set extraEnvVars[0].name=ALLOW_NONE_AUTHENTICATION
          --set extraEnvVars[0].value=yes
          --set extraEnvVars[1].name=ETCD_NAME
          --set extraEnvVars[1].value=${env:replicatedStateApp}
          --set extraEnvVars[2].name=ETCD_ADVERTISE_CLIENT_URLS
          --set extraEnvVars[2].value=http://${env:_rsip}:${env:_rspc}
          --set extraEnvVars[3].name=ETCD_LISTEN_CLIENT_URLS
          --set extraEnvVars[3].value=http://0.0.0.0:${env:_rspc}
          --set extraEnvVars[4].name=ETCD_INITIAL_ADVERTISE_PEER_URLS
          --set extraEnvVars[4].value=http://${env:_rsip}:${env:_rspp}
          --set extraEnvVars[5].name=ETCD_LISTEN_PEER_URLS
          --set extraEnvVars[5].value=http://0.0.0.0:${env:_rspp}
          --set extraEnvVars[6].name=ETCD_INITIAL_CLUSTER
          --set extraEnvVars[6].value=${env:rsCluster}
          --set extraEnvVars[7].name=ETCD_INITIAL_CLUSTER_STATE
          --set extraEnvVars[7].value=new
          --set extraEnvVars[8].name=ETCD_INITIAL_CLUSTER_TOKEN
          --set extraEnvVars[8].value=${env:rsClusterToken}
          --debug
      - kubectl: "expose deployment/${env:frontendApp}"
      - kubectl: "expose deployment/${env:backendApp}"
      - shell: 'Write-Information ">> Enpoint: http://${env:_endpointHost}/${env:frontendPathBase}"'

  - context: "${env:containerPrefix}002"
    variables:
      _number: "002"
      _basename: "${env:containerPrefix}${env:_number}"
      namespace: "${env:_basename}"
      frontendApp: "${env:_basename}-site"
      frontendPathBase: "front${env:_number}"
      backendApp: "${env:_basename}-grava"
      backendPathBase: "back${env:_number}"
      replicatedStateApp: "${env:rsPrefix}${env:_number}"
      replicatedStatePortClient: '$([Environment]::GetEnvironmentVariable("rspc${env:_number}"))'
      replicatedStatePortPeer: '$([Environment]::GetEnvironmentVariable("rspp${env:_number}"))'
      _endpointHost: '$([Environment]::GetEnvironmentVariable("${env:contextName}.hostname"))'
      _rsip: '$([Environment]::GetEnvironmentVariable("rsip${env:_number}"))'
      _rspc: '$([Environment]::GetEnvironmentVariable("rspc${env:_number}"))'
      _rspp: '$([Environment]::GetEnvironmentVariable("rspp${env:_number}"))'
    deployments:
      - kubectl: "delete namespace ingress-basic --v=1"
      - kubectl: "create namespace ingress-basic --v=1"
      - helm: "repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"
      - helm: "repo update"
      - helm: >
          install nginx-ingress ingress-nginx/ingress-nginx
          --namespace ingress-basic
          --set controller.replicaCount=2
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
          --set controller.admissionWebhooks.enabled=false
          --set controller.ingressClass=${env:ingressClass}
          --set tcp.${env:_rspc}="${env:namespace}/${env:replicatedStateApp}:${env:_rspc}"
          --set tcp.${env:_rspp}="${env:namespace}/${env:replicatedStateApp}:${env:_rspp}"
          --set controller.service.loadBalancerIP="$([Environment]::GetEnvironmentVariable("${env:contextName}.frontendIp"))"
          --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="${env:contextName}"          
          # --debug
      - kubectl: "delete namespace ${env:namespace} --v=1"
      - kubectl: "create namespace ${env:namespace} --v=1"
      - kubectl: "config set-context --current --namespace=${env:namespace} --v=1"
      - kubectl: "create secret docker-registry registry-credential --docker-server=http://${env:_registryLocation}.azurecr.io --docker-username=${env:dockerUsername} --docker-password=${env:dockerPassword}"
      - chart: "replicator-etcd"
        variables:
          installName: "${env:_basename}-deployment"
      - helm: "repo add bitnami https://charts.bitnami.com/bitnami"
      - helm: "repo update"
      - helm: >
          install ${env:replicatedStateApp} bitnami/etcd
          --namespace ${env:namespace}
          --set persistence.enabled=false
          --set auth.rbac.enabled=false
          --set containerPorts.client=${env:_rspc}
          --set containerPorts.peer=${env:_rspp}
          --set service.port=${env:_rspc}
          --set service.peerPort=${env:_rspp}
          --set service.type=LoadBalancer
          --set extraEnvVars[0].name=ALLOW_NONE_AUTHENTICATION
          --set extraEnvVars[0].value=yes
          --set extraEnvVars[1].name=ETCD_NAME
          --set extraEnvVars[1].value=${env:replicatedStateApp}
          --set extraEnvVars[2].name=ETCD_ADVERTISE_CLIENT_URLS
          --set extraEnvVars[2].value=http://${env:_rsip}:${env:_rspc}
          --set extraEnvVars[3].name=ETCD_LISTEN_CLIENT_URLS
          --set extraEnvVars[3].value=http://0.0.0.0:${env:_rspc}
          --set extraEnvVars[4].name=ETCD_INITIAL_ADVERTISE_PEER_URLS
          --set extraEnvVars[4].value=http://${env:_rsip}:${env:_rspp}
          --set extraEnvVars[5].name=ETCD_LISTEN_PEER_URLS
          --set extraEnvVars[5].value=http://0.0.0.0:${env:_rspp}
          --set extraEnvVars[6].name=ETCD_INITIAL_CLUSTER
          --set extraEnvVars[6].value=${env:rsCluster}
          --set extraEnvVars[7].name=ETCD_INITIAL_CLUSTER_STATE
          --set extraEnvVars[7].value=new
          --set extraEnvVars[8].name=ETCD_INITIAL_CLUSTER_TOKEN
          --set extraEnvVars[8].value=${env:rsClusterToken}
          --debug
      - kubectl: "expose deployment/${env:frontendApp}"
      - kubectl: "expose deployment/${env:backendApp}"
      - shell: 'Write-Information ">> Enpoint: http://${env:_endpointHost}/${env:frontendPathBase}"'

  - context: "${env:containerPrefix}003"
    variables:
      _number: "003"
      _basename: "${env:containerPrefix}${env:_number}"
      namespace: "${env:_basename}"
      frontendApp: "${env:_basename}-site"
      frontendPathBase: "front${env:_number}"
      backendApp: "${env:_basename}-grava"
      backendPathBase: "back${env:_number}"
      replicatedStateApp: "${env:rsPrefix}${env:_number}"
      replicatedStatePortClient: '$([Environment]::GetEnvironmentVariable("rspc${env:_number}"))'
      replicatedStatePortPeer: '$([Environment]::GetEnvironmentVariable("rspp${env:_number}"))'
      _endpointHost: '$([Environment]::GetEnvironmentVariable("${env:contextName}.hostname"))'
      _rsip: '$([Environment]::GetEnvironmentVariable("rsip${env:_number}"))'
      _rspc: '$([Environment]::GetEnvironmentVariable("rspc${env:_number}"))'
      _rspp: '$([Environment]::GetEnvironmentVariable("rspp${env:_number}"))'
    deployments:
      - kubectl: "delete namespace ingress-basic --v=1"
      - kubectl: "create namespace ingress-basic --v=1"
      - helm: "repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"
      - helm: "repo update"
      - helm: >
          install nginx-ingress ingress-nginx/ingress-nginx
          --namespace ingress-basic
          --set controller.replicaCount=2
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
          --set controller.admissionWebhooks.enabled=false
          --set controller.ingressClass=${env:ingressClass}
          --set tcp.${env:_rspc}="${env:namespace}/${env:replicatedStateApp}:${env:_rspc}"
          --set tcp.${env:_rspp}="${env:namespace}/${env:replicatedStateApp}:${env:_rspp}"
          --set controller.service.loadBalancerIP="$([Environment]::GetEnvironmentVariable("${env:contextName}.frontendIp"))"
          --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="${env:contextName}"          
          # --debug
      - kubectl: "delete namespace ${env:namespace} --v=1"
      - kubectl: "create namespace ${env:namespace} --v=1"
      - kubectl: "config set-context --current --namespace=${env:namespace} --v=1"
      - kubectl: "create secret docker-registry registry-credential --docker-server=http://${env:_registryLocation}.azurecr.io --docker-username=${env:dockerUsername} --docker-password=${env:dockerPassword}"
      - chart: "replicator-etcd"
        variables:
          installName: "${env:_basename}-deployment"
      - helm: "repo add bitnami https://charts.bitnami.com/bitnami"
      - helm: "repo update"
      - helm: >
          install ${env:replicatedStateApp} bitnami/etcd
          --namespace ${env:namespace}
          --set persistence.enabled=false
          --set auth.rbac.enabled=false
          --set containerPorts.client=${env:_rspc}
          --set containerPorts.peer=${env:_rspp}
          --set service.port=${env:_rspc}
          --set service.peerPort=${env:_rspp}
          --set service.type=LoadBalancer
          --set extraEnvVars[0].name=ALLOW_NONE_AUTHENTICATION
          --set extraEnvVars[0].value=yes
          --set extraEnvVars[1].name=ETCD_NAME
          --set extraEnvVars[1].value=${env:replicatedStateApp}
          --set extraEnvVars[2].name=ETCD_ADVERTISE_CLIENT_URLS
          --set extraEnvVars[2].value=http://${env:_rsip}:${env:_rspc}
          --set extraEnvVars[3].name=ETCD_LISTEN_CLIENT_URLS
          --set extraEnvVars[3].value=http://0.0.0.0:${env:_rspc}
          --set extraEnvVars[4].name=ETCD_INITIAL_ADVERTISE_PEER_URLS
          --set extraEnvVars[4].value=http://${env:_rsip}:${env:_rspp}
          --set extraEnvVars[5].name=ETCD_LISTEN_PEER_URLS
          --set extraEnvVars[5].value=http://0.0.0.0:${env:_rspp}
          --set extraEnvVars[6].name=ETCD_INITIAL_CLUSTER
          --set extraEnvVars[6].value=${env:rsCluster}
          --set extraEnvVars[7].name=ETCD_INITIAL_CLUSTER_STATE
          --set extraEnvVars[7].value=new
          --set extraEnvVars[8].name=ETCD_INITIAL_CLUSTER_TOKEN
          --set extraEnvVars[8].value=${env:rsClusterToken}
          --debug
      - kubectl: "expose deployment/${env:frontendApp}"
      - kubectl: "expose deployment/${env:backendApp}"
      - shell: 'Write-Information ">> Enpoint: http://${env:_endpointHost}/${env:frontendPathBase}"'
