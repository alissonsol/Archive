# Workloads information - localhost
---
globalVariables:
  namespace:         "yrn42peerkeys"
  containerPrefix:   "yrn42peerkeys"
  registryName:      "componentsRegistry"
  websiteTlsSecret:  "website-tls-secret"
  certManagerIssuerEmail: "certificates@yrn42peerkeys.app"
  ingressClass:       "nginx"
  _registryLocation: "$($([Environment]::GetEnvironmentVariable(\"${env:registryName}.registryLocation\")) -replace '.azurecr.io','')"
  dockerUsername:    "placeholder"
  dockerPassword:    "placeholder"

workloads:
# Deploy ingress just once, since it is just one cluster anyway
- context: "docker-desktop"
  variables:
    namespace: "default"
  deployments:
  - kubectl: "delete namespace ingress-basic --v=1"
  - kubectl: "create namespace ingress-basic --v=1"
  - helm: "repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"
  - helm: "repo update"
  - helm: >
      install nginx-ingress ingress-nginx/ingress-nginx
      --namespace ingress-basic
      --set controller.replicaCount=2
      --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux
      --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
      --set controller.service.loadBalancerIP="placeholder"
      --set controller.admissionWebhooks.enabled=false
      # --debug

- context: "yrn42peerkeys001"
  variables:
    namespace: "yrn42peerkeys001"
    frontendApp: "yrn42peerkeys001-site"
    frontendPathBase: "front001"
    backendApp: "yrn42peerkeys001-grava"
    backendPathBase: "back001"
  deployments: 
  - kubectl: "delete namespace ${env:namespace} --v=1"
  - kubectl: "create namespace ${env:namespace} --v=1"
  - kubectl: "config set-context --current --namespace=${env:namespace} --v=1"
  - kubectl: "create secret docker-registry registry-credential --docker-server=http://${env:_registryLocation} --docker-username=${env:dockerUsername} --docker-password=${env:dockerPassword}"
  - chart: "localhost/deployment"
    variables:
      installName: "yrn42peerkeys001-deployment"
  - kubectl: "expose deployment/${env:frontendApp}"
  - kubectl: "expose deployment/${env:backendApp}"
  - shell: "Write-Information \">> Enpoint: http://$([Environment]::GetEnvironmentVariable(\"${env:contextName}.hostname\"))/${env:frontendPathBase}\""

- context: "yrn42peerkeys002"
  variables:
    namespace: "yrn42peerkeys002"
    frontendApp: "yrn42peerkeys002-site"
    frontendPathBase: "front002"
    backendApp: "yrn42peerkeys002-grava"
    backendPathBase: "back002"
  deployments: 
  - kubectl: "delete namespace ${env:namespace} --v=1"
  - kubectl: "create namespace ${env:namespace} --v=1"
  - kubectl: "config set-context --current --namespace=${env:namespace} --v=1"
  - kubectl: "create secret docker-registry registry-credential --docker-server=http://${env:_registryLocation} --docker-username=${env:dockerUsername} --docker-password=${env:dockerPassword}"
  - chart: "localhost/deployment"
    variables:
      installName: "yrn42peerkeys002-deployment"
  - kubectl: "expose deployment/${env:frontendApp}"
  - kubectl: "expose deployment/${env:backendApp}"
  - shell: "Write-Information \">> Enpoint: http://$([Environment]::GetEnvironmentVariable(\"${env:contextName}.hostname\"))/${env:frontendPathBase}\""

- context: "yrn42peerkeys003"
  variables:
    namespace: "yrn42peerkeys003"
    frontendApp: "yrn42peerkeys003-site"
    frontendPathBase: "front003"
    backendApp: "yrn42peerkeys003-grava"
    backendPathBase: "back003"
  deployments: 
  - kubectl: "delete namespace ${env:namespace} --v=1"
  - kubectl: "create namespace ${env:namespace} --v=1"
  - kubectl: "config set-context --current --namespace=${env:namespace} --v=1"
  - kubectl: "create secret docker-registry registry-credential --docker-server=http://${env:_registryLocation} --docker-username=${env:dockerUsername} --docker-password=${env:dockerPassword}"
  - chart: "localhost/deployment"
    variables:
      installName: "yrn42peerkeys003-deployment"
  - kubectl: "expose deployment/${env:frontendApp}"
  - kubectl: "expose deployment/${env:backendApp}"
  - shell: "Write-Information \">> Enpoint: http://$([Environment]::GetEnvironmentVariable(\"${env:contextName}.hostname\"))/${env:frontendPathBase}\""
